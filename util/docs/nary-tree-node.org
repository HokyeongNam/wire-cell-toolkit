#+title: N-ary Tree Node
#+include: ../../docs/include-topic.org

* Overview

WCT provides a N-ary [[https://en.wikipedia.org/wiki/Tree_(data_structure)][tree data structure]] in the form of a single class
~WireCell::NaryTree::Node~.

* Synopsis

A synopsis of the most important parts of the API is here:

#+begin_src c++
  // in WireCellUtil/NaryTree.h
  namespace WireCell::NaryTree {
      template<class Value>
      class Node {
  
          Value value;
          Node* parent;
  
          using owned_ptr = std::unique_ptr<Node>;
          using nursery_type = std::list<owned_ptr>; 

          Node();
          Node(const Value& val);
          Node(Value&& val);
  
          Node* insert(const Value& val);
          Node* insert(Value&& val);
          Node* insert(owned_ptr node);
  
          owned_ptr remove(const Node* node);    
  
          nursery_type& children();
          auto child_values();
          auto child_nodes();
      };
  }
#+end_src

* Description

A ~Node~ has the following parts:

- value :: of an application-determined type given by the ~Value~ template parameter.
- parent :: a pointer to another *node* that has this *node* as a child or ~nullptr~ if this *node* is free.
- children :: a collection of child *nodes* that this *node* owns.

A ~Node~ may be constructed empty, relying on a ~Value~ to provide a
default constructor for the *value*.  Alternatively, a ~Node~ may be
constructed either by copying or moving a *value*.

A *child* ~Node~ may be created by *inserting* its *value* into an existing
*parent* ~Node~.  The child will have its ~.parent~ value pointing to the
*parent* node.  A ~Node~ that has no *parent* is not itself a child and is
considered a /root node/.  If a ~Node~ is a child of a parent and it is
inserted into another parent ~Node~ it will be removed from its original
parent.  When a child ~Node~ is removed from a parent the ~remove()~
method returns a ~std::unique_ptr<Node>~ representing that the parent
relinquishes ownership of the child to the caller.

The collection of children of a ~Node~ may be accessed with its
~children()~ method.  Their are held by ~std::unique_ptr<Node>~ and thus
care must be taken when working directly with the children collection.
The ~child_values()~ and ~child_nodes()~ provide an iterator range to
access the child *values* or to acess the children as simple ~Node*~,
respectively.

* Depth first search

One may perform a depth-first search (DFS, really a "visit") using iterators.
#+begin_src c++
  for (const auto& node : root->depth()) {
      // use node
  }
#+end_src

* Order and stability

By default, the list of children owned by a parent is in the order of insertion
of the children.  This order is well defined and stable (not random).  The owner
of a constructed tree may apply a custom ordering to any parent's child list.

For example, assume the tree nodes have a value type with a ~Value::quantity~ data
member.  To sort all children lists by this quantity:

#+begin_src c++
  template<Value>
  bool by_quantity(const NaryTree<Value>::owned_ptr& a,
                   const NaryTree<Value>::owned_ptr& b)
  {
      return a->value.quantity < b->value.quantity;
  }
  for (auto& node : root->depth()) {
      root->sort_children(by_quantity);
  }
#+end_src

As DFS iterates first on parent and then children, it is safe to perform this
sort as part of a DFS.

* Notification

The ~Value~ of a ~Node~ will be informed of state changes to the tree on which it is rooted but only if the ~Value~ defines a method matching this signature:

#+begin_example
bool Value::notify(std::vector<Node<Value>*> path, Action action);
#+end_example

The ~path~ provides an ordered list of nodes.  The front of the list is the node "implicated" by the action.  The ~notify()~ is called on the ~Value~ of that implicated node first, with a ~path~ containing only that node.  If that ~notify()~ returns ~true~ then the parent not of the implicated node, if it exists, is added to ~path~ and ~notify()~ is called on that parent node.  Etc for the parent's parent.  This upward propagation ceases when a node is the root (lacks a parent) or when a ~notify()~ returns ~false~.

The ~action~ is an enum that determines the nature of the state change.  A notification may carry one of the following action signifiers: 

- *constructed* :: the node was just constructed.
- inserted :: the node is a child that was just inserted to a parent.  
- removing :: the node is a child that will next be removed from its parent.
- ordered :: the children of a node have had a custom order applied.

Note, the *constructed* action is special.  It is not propagated and only the ~Value~ of the constructed node is notified.

The ~NaryTree::Notified<Value>~ class defined in ~NaryTreeNotified.h~ provides a
base class for a ~Value~ type ([[https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern][CRTP]]) that helps dispatch an action to a
corresponding virtual method.  A ~Value~ type may inherit from this type and
define zero or more of these methods:

#+begin_src c++
virtual void on_construct(node_type* node);
virtual bool on_insert(const std::vector<node_type*>& path);
virtual bool on_remove(const std::vector<node_type*>& path);
virtual bool on_ordered(const std::vector<node_type*>& path);
#+end_src


* Facade

A node holds a ~Value~ by value.  The ~Value~ type determines if the tree is comprised of a homogeneous or a heterogeneous set of nodes.  The ~Value~ may provide a mix of types if it holds one or more objects by polymorphic pointer.  The developer is free to provide such ~Value~ types, however ~NaryTree~ provides a mechanism called "facade" that allows the developer to provide a homotypic ~Value~ and "bolt on" a polymorphic type.

In particular, the "facade" mechanism supports connecting a C++ class hierarchy to the tree node hierarchy.  Specifically, one may assign a specific facade type to the nodes in a specific layer of the tree.  The facade and value can have access to each other and to their associated and owning node (and thus the rest of the tree).  

The facade mechanism is provided by intermediate templated classes that follow the CRTP and "wrap" an otherwise non-polymorphic ~Value~ type.  These are:

- ~Facade<Value>~ is a ~Notified<Value>~ and will use the ~on_construct()~ notification to collect the node pointer and make it available to external code or a sub class.

- ~Faced<Value>~ functionality to hold a facade instance.  A ~Value~ that inherits from this type enables a tree nodes to hold a variety of unique facade types inheriting from ~Facade<Value>~.  A ~Faced~ is itself a ~Facade~ which, in principle, allows for chaining of types.

- ~FacadeParent<Child,Value>~ base is a ~Facade<Value>~ that provides code to deal with its node's child nodes via their ~Facade<Child>~ types.  A tree using this facade can be seen as homogeneous across each layer and heterogeneous down the layers.
Putting this together, here is an example excerpted from ~doctest-pointtree-facade.cxx~ with ~L0~ providing the type of facade for the root layer node, ~L1~ the middle layer and ~L2~ the leaf layer.

#+begin_src c++
  struct Value : public Faced<Value> { ... };
  struct L2 : public Facade<Value> { ... };
  struct L1 : public FacadeParent<L2, Value> { ... };
  struct L0 : public FacadeParent<L1, Value> { ... };

  auto root = build_tree();
  auto* l0 = root->facade<L0>();
  auto* l1 = l0->children()[0];    // an L1 facade
  auto* l2 = l1->children()[0];    // an L2 facade

  // navigate from facade to node to value
  auto name0 = l0->node()->value.name;
#+end_src

