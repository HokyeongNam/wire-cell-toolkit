#+title: The Tensor I/O test
#+setupfile: ../../docs/setup-topic.org

* Overview

The "tenio" test runs a long chain of jobs joined by files (see also
[[file:../../aux/docs/frame-tensor.org][Frames and their representations]] and [[file:../../aux/docs/tensor-data-model.org][Tensor set data model]]).  It is a
reimplementation of an older [[file:tenio.smake]] Snakemake file with some
additional tests.

* Meta

This test is defined in an org file which may either be /tangled/ to
produce a BATS test file or /exported/ to produce HTML or PDF that you
are currently reading.

The test source is in the ~test-tenio.bats~ BATS test file which is
generated by /tangling/ the ~test-tenio.org~ file.  To regenerate it, open
the org file and press the keys ~C-c C-v t~.  For simplicity, this
genearted BATS file is also committed to the repository.  This same
org file may be exported to documentation in [[file:test-tenio.html][HTML]] format with ~C-c C-e
h h~ or [[file:test-tenio.pdf][PDF]] format with ~C-c C-e l p~.  Do not edit the tangled nor the
exported files.

* Data

The processing chain starts by consuming *depos*.  The stages of the
chain produce an output data file over the following data tiers
identified with concise code names:

- adc :: the simulated ADC from the depos
- acp :: a copy of ADC made via WCT tensor I/O
- sig :: output of SP on ADC tier
- scp :: a copy of signal to frame-file format
- img :: WCT imaging applied to sig
- ptc :: WCT point cloud formation
- brf :: Blob reframer.

A pair ~{<src>,<tgt>}~ is an edge that connects two data tiers with a
corresponding ~wire-cell~ configuration file ~tenio-<src>-<tgt>.jsonnet~
job.  The supported edges are defined here:

#+caption: The supported edges connecting two data tiers
#+name: edges
|------+-----+-----+-----+-----+-----+-----|
| depo | adc | adc | sig | sig | img | img |
|------+-----+-----+-----+-----+-----+-----|
| adc  | acp | sig | img | scp | ptc | brf |
|------+-----+-----+-----+-----+-----+-----|


A number of tests and additional output files are applied to each of
the produced data tier files.

- dotify :: produce a graphic showing the WCT flow graph.
- logok :: check log is non-zero and contains neither Warnings nor Errors.
- outok :: check output file exists and is not empty

* Preamble

The test begins with the usual boilerplate of loading the WCT Bats
library.

#+begin_src bash :tangle test-tenio.bats
  #!/usr/bin/env bats
  
  # This file is generated.  Any edits may be lost.
  # See img/test/test-tenio.org for source to modify.
  
  # standard WCT Bats support library
  bats_load_library "wct-bats.sh"
#+end_src

#+RESULTS:


* Make DAG

Normally we give ~wire-cell~ the ~.jsonnet~ DAG file directly but we also
want to make a GraphViz dot.  The test will run overall faster if we
apply ~wcsonnet~ once to compile to JSON and then use the JSON file
multiple times.

#+begin_src bash :tangle test-tenio.bats
  data_ext=npz
  # zip:22, gzip:29, tar:10240, tar.gz:122, no-PC-zip:371
  empty_data=500
  
  function make_dag () {
      local src=$1; shift
      local tgt=$1; shift
      #declare -a args=( -A "detector=pdsp" -S "anode_iota=[0]" )
      declare -a args=( -A "detector=pdsp" )
      if [ "$src" != "depo" ] ; then
          args+=( -A "infiles=apa-%(anode)s-${src}.${data_ext}" )
      fi
      args+=( -A "outfiles=apa-%(anode)s-${tgt}.${data_ext}")
      local cfg_file="$(relative_path tenio-${src}-${tgt}.jsonnet)"
      run_idempotently -s "$cfg_file" -t "dag-${tgt}.json" -- \
          compile_jsonnet "$cfg_file" "dag-${tgt}.json" "${args[@]}"
      [[ -s dag-${tgt}.json ]]
      run_idempotently -s "dag-${tgt}.json" -t "dag-${tgt}.png" -- \
          dotify_graph "dag-${tgt}.json" "dag-${tgt}.png"
  }
#+end_src


We do this for each tier-transition.  Note, these repetitive tests are
generated by tangling this ~test-tenio.org~ document.

#+begin_src python :var edges=edges :exports results :results output org :wrap "src bash :tangle test-tenio.bats"
  srcs=edges[0]
  tgts=edges[1]
  for src,tgt in zip(srcs,tgts):
      print(f'''
  @test "compile configuration for {src} to {tgt}" {{
      cd_tmp file
      make_dag {src} {tgt} 
  }}''')
#+end_src

#+RESULTS:
#+begin_src bash :tangle test-tenio.bats

@test "compile configuration for depo to adc" {
    cd_tmp file
    make_dag depo adc 
}

@test "compile configuration for adc to acp" {
    cd_tmp file
    make_dag adc acp 
}

@test "compile configuration for adc to sig" {
    cd_tmp file
    make_dag adc sig 
}

@test "compile configuration for sig to img" {
    cd_tmp file
    make_dag sig img 
}

@test "compile configuration for sig to scp" {
    cd_tmp file
    make_dag sig scp 
}

@test "compile configuration for img to ptc" {
    cd_tmp file
    make_dag img ptc 
}

@test "compile configuration for img to brf" {
    cd_tmp file
    make_dag img brf 
}
#+end_src

#+RESULTS:

* Run ~wire-cell~

We run each ~wire-cell~ stage in turn.

#+begin_src bash :tangle test-tenio.bats
  function run_dag () {
      local src=$1; shift
      local tgt=$1; shift
      run_idempotently -s apa-0-${src}.${data_ext} -t apa-0-${tgt}.${data_ext} -- \
          wct -l dag-${tgt}.log -L debug dag-${tgt}.json
      local warnings=$(grep '\bW\b' dag-${tgt}.log)
      echo "$warnings" 1>&3
      local errors=$(grep '\bE\b' dag-${tgt}.log)
      [[ -z "$errors" ]]
  }
#+end_src

#+RESULTS:

#+begin_src python :var edges=edges :exports results :results output org :wrap "src bash :tangle test-tenio.bats"
  srcs=edges[0]
  tgts=edges[1]
  for src,tgt in zip(srcs,tgts):
      print(f'''
  @test "run wire-cell stage {src} to {tgt}" {{
      cd_tmp file
      run_dag {src} {tgt} 
  }}''')

#+end_src

#+RESULTS:
#+begin_src bash :tangle test-tenio.bats

@test "run wire-cell stage depo to adc" {
    cd_tmp file
    run_dag depo adc 
}

@test "run wire-cell stage adc to acp" {
    cd_tmp file
    run_dag adc acp 
}

@test "run wire-cell stage adc to sig" {
    cd_tmp file
    run_dag adc sig 
}

@test "run wire-cell stage sig to img" {
    cd_tmp file
    run_dag sig img 
}

@test "run wire-cell stage sig to scp" {
    cd_tmp file
    run_dag sig scp 
}

@test "run wire-cell stage img to ptc" {
    cd_tmp file
    run_dag img ptc 
}

@test "run wire-cell stage img to brf" {
    cd_tmp file
    run_dag img brf 
}
#+end_src

* File sanity checks

Next we check that that files have at least some data.  We skip some
APAs for ~img~ and ~ptc~ files as the test includes no activity and we
expect them their files to be "empty".

#+begin_src bash :tangle test-tenio.bats
  @test "no unexpected empty files" {
      cd_tmp file
  
      for tier in adc acp sig ; do
          for apa in 0 1 2 3 4 5 ; do
              file_larger_than apa-${apa}-${tier}.${data_ext} ${empty_data}
          done
      done
      for tier in img ptc ; do
          for apa in 0 2 3 5 ; do # some apas are "empty"
              file_larger_than apa-${apa}-${tier}.${data_ext} ${empty_data}
          done
      done
  }
#+end_src
